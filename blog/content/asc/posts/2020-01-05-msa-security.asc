{:title "스프링 마이크로서비스 보안"
 :layout :post
 :tags  ["OAuth2", "스프링 마이크로서비스 보안", "Spring Cloud Security"]
}

:sectnums:
:toc:

안전한 애플리케이션은 사용자 본인 여부를 확인하고, 수행하려는 작업을 할 수 있는지 권한을 확인해야 한다.
서로 다른 서비스 사이에서 인증과 권한 부여를 위한 표준이 OAuth 인데,
마이크로서비스를 보호하기 위해서 OAuth2를 사용하는 방법에 대해 알아본다.

== OAuth2 소개
=== OAuth2 의 4가지 Roles
* Resource owner +
보호된 자원에 접근 승인을 할 수 있는 엔터티이다. Resource Owner 가 사람인 경우, 최종 사용자라고 볼 수 있다.

* Resource server +
보호된 자원을 호스팅 하는 서버이다. 액세스 토큰을 이용하여 보호된 자원 요청에 대한 응답을 처리한다.
    
* Client (Application) +
보호된 자원을 요청하는 애플리케이션이다.

* Authentication server +
클라이언트에게 액세스 토큰을 발급하는 서버이다. 자원 소유자 인증을 받았는지, 작업을 수행할 권한이 부여되어 있는지를 담은 토큰을 발급한다.
    
=== OAuth2 Protocol Flow
     +--------+                               +---------------+
     |        |--(A)- Authorization Request ->|   Resource    |
     |        |                               |     Owner     |
     |        |<-(B)-- Authorization Grant ---|               |
     |        |                               +---------------+
     |        |
     |        |                               +---------------+
     |        |--(C)-- Authorization Grant -->| Authorization |
     | Client |                               |     Server    |
     |        |<-(D)----- Access Token -------|               |
     |        |                               +---------------+
     |        |
     |        |                               +---------------+
     |        |--(E)----- Access Token ------>|    Resource   |
     |        |                               |     Server    |
     |        |<-(F)--- Protected Resource ---|               |
     +--------+                               +---------------+

[upperalpha]
. 클라이언트가 자원 소유자에게 권한 요청을 한다. 권한 요청은 자원 소유자에게 직접하도록 만들 수도 있고, 권한 서버를 중간 단계로 거쳐 간접적으로 요청할 할 수도 있다.
. 자원 소유자가 권한을 허가하면 Authorization Grant(권한 증서)를 클라이언트에게 발급해준다. Authorization Grant 는 자원 소유자가 권한을 부여했다는 확인증(Credentials) 이며, 4가지 타입이 있다. 
. 클라이언트는 권한 증서로 권한 서버에 액세스 토큰 발급을 요청한다.
. 권한 서버는 권한 증서가 유효하면 액세스 토큰을 발급해준다.
. 클라이언트는 발급받은 액세스 토큰으로 자원 서버에 자원을 요청한다.
. 자원 서버는 액세스 토큰이 유효한지 검사하고, 유효하면 보호된 자원에 대한 요청을 처리한다.

// 클라이언트가 자격 증명을 얻을 때는 권한 서버를 중간에 거치는 방식을 선호한다. (Authorization Code Grant)
    
=== Grant type 4가지
* Authorization Code (인가 코드) +
클라이언트가 직접 자원 소유자에게 직접 권한 부여를 요청하는 대신, 자원 소유자가 권한 서버를 통해 인증을 받고 권한을 허가한다. 자원 소유자가 권한을 허가한다면 Authorization Code (인가 코드)를 클라이언트에게 발급해준다. 클라이언트는 이 인가 코드를 권한 서버에 보내주면서 자신이 권한 허가를 받았다는 사실을 알리고 액세스 토큰을 받는다.
액세스 토큰을 바로 클라이언트에게 전달하지 않기 때문에 전달과정에서 생길 수 있는 잠재적인 유출 위험 방지에 도움이 된다. 가장 널리 사용된다.

* Implicit (암시적) +
인가 코드를 간소화한 방식으로 Authorization Code 발급 과정 없이 액세스 토큰을 바로 발급한다. 간편하지만 보안성이 낮다.

* Resource Owner Password Credentials +
액세스 토큰을 얻을 때, Authorization Grant(권한 증서)로 자원 소유자의 계정 인증정보(계정 아이디, 패스워드)를 사용하는 방식이다. 계정 정보가 애플리케이션에 직접 입력되어야 하므로 클라이언트를 신뢰할 수 있을 때 사용해야 한다.

* Client Credentilas (클라이언트 자격증명) +
자원 소유자가 클라이언트인 상황에서 사용한다. 클라이언트가 관리하는 자원만 접근하는 것으로 권한이 한정되어 있을 때 활용할 수 있다.
클라이언트는 자기를 인증하는 정보(애플리케이션 이름과 시크릿 키)를 사용하여 액세스 토큰을 요청한다.
        
== OAuth2 로 Spring 엔드포인트 보호하기
OAuth2 패스워드 그랜트 타입을 구현해본다.

=== OAuth2 인증 서비스 설정
. 의존성 추가

.authentication-service/pom.xml
[source,xml]
----
<dependency>
    <groupId>org.springframework.cloud</groupId>
    <artifactId>spring-cloud-security</artifactId>
</dependency>
----

. 클래스 설정

.authentication-service/~~/Application.java
[source,java]
----
@SpringBootApplication
@RestController
@EnableResourceServer
@EnableAuthorizationServer # <1>
public class Application {
    @RequestMapping(value = { "/user" }, produces = "application/json") # <2>
    public Map<String, Object> user(OAuth2Authentication user) {
        Map<String, Object> userInfo = new HashMap<>();
        userInfo.put("user", user.getUserAuthentication().getPrincipal());
        userInfo.put("authorities", AuthorityUtils.authorityListToSet(user.getUserAuthentication().getAuthorities()));
        return userInfo;
    }

    public static void main(String[] args) {
        SpringApplication.run(Application.class, args);
    }
}
----
<1> 이 서비스가 OAuth2 서비스가 될 것이라고 스프링 클라우드에 알린다.
<2> `/auth/user` 라는 엔드포인트를 추가하였다. OAuth2 로 보호되는 서비스에 접근하려고 할 때 사용된다. 토큰의 유효성을 검증하고 서비스에 접근하려는 사용자의 역할을 조회한다.

NOTE: spring cloud Finchley 릴리즈 기준의 소스이다.

=== 클라이언트 애플리케이션 OAuth2 인증 서비스에 등록
OAuth2 서비스(인증 서비스)에 등록될 클라이언트를 정의하고, 클라이언트의 사용자 자격 증명을 정의한다.

.authentication-service/~~/security/OAuth2Config.java
[source,java]
----
@Configuration
public class OAuth2Config extends AuthorizationServerConfigurerAdapter { // <1>

    @Autowired
    private AuthenticationManager authenticationManager;

    @Autowired
    private UserDetailsService userDetailsService;

    @Override
    public void configure(ClientDetailsServiceConfigurer clients) throws Exception { // <2>
        clients.inMemory()
                .withClient("eagleeye")
                .secret(PasswordEncoderFactories.createDelegatingPasswordEncoder().encode("thisissecret"))
                .authorizedGrantTypes("password", "client_credentials")
                .scopes("webclient", "mobileclient");
    }

    @Override
    public void configure(AuthorizationServerEndpointsConfigurer endpoints) throws Exception { // <3>
      endpoints
        .authenticationManager(authenticationManager)
        .userDetailsService(userDetailsService);
    }
}
----
<1> AuthorizationServerConfigurerAdapter 클래스를 확장하고 @Configuration 애너테이션을 추가하여 스프링 시큐리티의 핵심 인증 및 인가 기능을 수행하는 기본 메커니즘을 사용한다.
<2> 인증 서비스로 보호되는 서비스에 접근할 수 있는 클라이언트 애플리케이션을 등록한다.
- inMemory(): 애플리케이션 정보를 인메모리 저장소에 저장
- withClient(): 등록하는 애플리케이션 이름
- secret(): OAuth2 서버를 호출할 때 제시할 시크릿(패스워드)
- authorizedGrantTypes(): OAuth2 서비스에서 지원하는 Authorization Grant Type 을 지정한다.
authorization_code, password, client_credentials, implicit, refresh_token
https://docs.spring.io/spring-security-oauth2-boot/docs/current/reference/html/boot-features-security-oauth2-authorization-server.html
- scopes(): 애플리케이션이 취할 수 있는 행동을 제한할 규칙을 정한다.

<3> 스프링 시큐리티의 인증 관리자 빈과 사용자 정보가 저장된 빈을 이용할 것이라고 알려준다.

=== 개별 사용자 자격증명과 사용자 역할 설정
개별 사용자의 자격증명과 사용자가 속한 역할을 설정한다.
스프링은 사용자 정보를 인메모리 데이터 저장소, RDB, LDAP 에서 저장하고 조회할 수 있다.

.authentication-service/~~/security/WebSecurityConfigurer.java
[source,java]
----

@Configuration
public class WebSecurityConfigurer extends WebSecurityConfigurerAdapter { // <1>
    @Override
    @Bean // <2>
    public AuthenticationManager authenticationManagerBean() throws Exception {
        return super.authenticationManagerBean();
    }

   @Override
    @Bean // <3>
    public UserDetailsService userDetailsServiceBean() throws Exception {
        return super.userDetailsServiceBean();
    }

    @Override // <4>
    protected void configure(AuthenticationManagerBuilder auth) throws Exception {
        PasswordEncoder encoder = PasswordEncoderFactories.createDelegatingPasswordEncoder();
        
        auth.inMemoryAuthentication()
            .passwordEncoder(encoder)
            .withUser("john.carnell").password(encoder.encode("password1")).roles("USER")
            .and()
            .withUser("william.woodward").password(encoder.encode("password2")).roles("USER", "ADMIN");
    }
}
----
<1> 스프링 시큐리티의 WebSecurityConfigurerAdapter 를 확장하여, 사용자를 인증하고 인증 사용자에 대한 사용자 정보를 반환하는 메커니즘을 제공한다.
<2> 스프링 시큐리티가 인증을 처리하는데 사용된다.
<3> 스프링 시큐리티에서 반환될 사용자 정보를 저장하는데 사용한다.
<4> 사용자, 사용자 패스워드, 사용자 역할을 정의한다.

=== 사용자 인증
패스워드 그랜트 타입으로 OAuth2 서비스를 만들었으므로
패스워드 그랜트 타입으로 액세스 토큰을 발급하고,
액세스 토큰으로 보호되는 자원 (ex. 사용자 정보)를 조회해본다.

// https://stackoverflow.com/questions/23118249/whats-the-difference-between-request-payload-vs-form-data-as-seen-in-chrome

== OAuth2 로 자원 서버 보호
OAuth2 인증 서비스가 액세스 토큰 생성과 관리를 담당하지만, 
작업 수행의 권한 여부는 각각의 마이크로서비스에서 정의한다.

=== 의존성 추가

.리소스서버/pom.xml
[source,xml]
----
<dependency>
    <groupId>org.springframework.cloud</groupId>
    <artifactId>spring-cloud-security</artifactId>
</dependency>
----

=== OAuth2 인증 서비스 통신을 위한 서비스 구성
보호 자원 서비스를 호출할 때, Authorization HTTP 헤더에 이 서비스에 대한 액세스 토큰을 가지고 있어야 한다. 그 다음 보호 자원은 OAuth2 인증 서비스에 다시 액세스 토큰 유효성을 확인해야 한다.

.리소스서버/src/main/resources/application.yaml
[source,yaml]
----
security:
  oauth2:
    resource:
       userInfoUri: http://localhost:8901/auth/user
----

.리소스서버/src/main/java/~~/Application.java
[source,java]
----
@SpringBootApplication
@EnableEurekaClient
@EnableCircuitBreaker
@EnableResourceServer // <1>
public class Application {
    @Bean
    public Filter userContextFilter() {
        UserContextFilter userContextFilter = new UserContextFilter();
        return userContextFilter;
    }

    public static void main(String[] args) {
        SpringApplication.run(Application.class, args);
    }
}
----
<1> 해당 마이크로서비스가 보호 자원임을 스프링 클라우드 애너테이션으로 지정한다.

@EnableResourceServer 는 서비스로 유입되는 모든 호출을 가로채서 HTTP 헤더에 OAuth2 액세스 토큰이 있는지 확인한 후,
토큰의 유효성을 확인하기 위해 userInfoUri에 정의된 콜백 URL을 호출한다.

=== 서비스 접근 제어
토큰이 유효하다는 것을 알게되면 @EnableResourceServer 애너테이션은 서비스에 접근할 수 있는 대상에 대해 접근 제어 규칙을 적용할 수 있다.

.리소스서버/src/main/java/~~/ResourceServerConfiguration.java
[source,java]
----
@Configuration
public class ResourceServerConfiguration extends ResourceServerConfigurerAdapter {
    
    @Override
    public void configure(HttpSecurity http) throws Exception{
        http
        .authorizeRequests()
          .antMatchers(HttpMethod.DELETE, "/*/organizations/**")
          .hasRole("ADMIN")
          .anyRequest()
          .authenticated();
    }
}
----

- HTTP 헤더에 OAuth2 액세스 토큰 없이 호출 하면 401 HTTP 응답 코드 확인
- URL 버전 관계없이 oraganizations/ 로 시작하는 모든 엔드포인트에 대한 DELETE 호출 권한은 ADMIN 역할로 제한
- 나머지 모든 URL 은 인증된 사용자만 접근 허용

=== 서비스간 OAuth2 액세스 토큰 전파
마이크로서비스 환경에서는 하나의 기능을 수행하는데 여러 서비스를 호출하곤 한다. 이런 상황에서 한 서비스 호출에서 다른 서비스 호출로 액세스 토큰 전파하는 방법을 알아본다.

. 주울 서비스 게이트 웨이가 OAuth2 토큰을 라이선싱 서비스에 전달하도록 한다.
. 서비스 A 가 OAuth2 자원 서비스가 되도록 구성하고, 인가 규칙을 설정한다.
. 서비스 A 에서 서비스 B 를 호출하는 경우, 서비스 A 로 들어온 Authorization HTTP 헤더를 서비스 A 에서 나가는 모든 호출(다른 서비스 호출)에 이 헤더를 추가해주어야 한다.
* 서블릿 필터로 직접 처리하거나, 스프링 OAuth2 의 OAuth2 호출을 지원하는 OAuth2RestTemplate 을 사용하면 된다.

.리소스서버/src/main/java/~~/Application.java
[source,java]
----
public class Application {

    @Autowired
    private ServiceConfig serviceConfig;

    private static final Logger logger = LoggerFactory.getLogger(Application.class);

    @Bean // <1>
    public OAuth2RestTemplate restTemplate(UserInfoRestTemplateFactory factory){
        return factory.getUserInfoRestTemplate();
    }
    public static void main(String[] args) {
        SpringApplication.run(Application.class, args);
    }
}
----
<1> OAuth2 보호 서비스를 호출하는 서비스에 자동연결(auto-wired)될 수 있도록 빈으로 등록한다.

.리소스서버/src/main/java/~~/OrganizationRestTemplateClient.java
[source,java]
----
@Component
public class OrganizationRestTemplateClient {
    @Autowired
    OAuth2RestTemplate restTemplate;

    private static final Logger logger = LoggerFactory.getLogger(OrganizationRestTemplateClient.class);

    public Organization getOrganization(String organizationId){
        logger.debug("In Licensing Service.getOrganization: {}", UserContext.getCorrelationId());

        ResponseEntity<Organization> restExchange =
                restTemplate.exchange(
                        "http://zuulserver:5555/api/organization/v1/organizations/{organizationId}",
                        HttpMethod.GET,
                        null, Organization.class, organizationId);

        return restExchange.getBody();
    }
}
----

NOTE: 주울의 OAuth2 액세스 토큰을 하위로 전파하고, OAuth2 서비스 요청을 인가할 수 있는 기능이 있다.

== JWT 와 OAuth2
OAuth2 는 토큰 기반의 인가 표준이지만, 명세에는 토큰 정의 방법이 없다.
OAuth2 토큰 표준 부재를 해결하기 위해 JWT 라는 표준이 등장했다.

JWT 는 사용자 인증에 필요한 모든 정보가 토큰 자체에 포함되어 있다.
때문에 마이크로서비스에서 JWT 토큰의 서명 유효성을 검증하고 토큰 내용물을 확인할 수 있다.
즉, 마이크로서비스에서 토큰의 유효성 확인을 위해 매번 권한 서버를 호출해야할 필요가 없다.

=== JWT 를 위한 인증 서비스 구성
의존성 추가

[source,xml]
----
<dependency>
    <groupId>org.springframework.security</groupId>
    <artifactId>spring-security-jwt</artifactId>
    <version>1.0.9.RELEASE</version>
</dependency>
----

인증 서비스에서 JWT 토큰을 서명하고 생성하는 방법을 정의한다.
[source,java]
----
@Configuration
public class JWTTokenStoreConfig {

    @Autowired
    private ServiceConfig serviceConfig;

    @Bean
    public TokenStore tokenStore() {
        return new JwtTokenStore(jwtAccessTokenConverter());
    }

    @Bean
    @Primary
    public DefaultTokenServices tokenServices() { // <1>
        DefaultTokenServices defaultTokenServices = new DefaultTokenServices();
        defaultTokenServices.setTokenStore(tokenStore());
        defaultTokenServices.setSupportRefreshToken(true);
        return defaultTokenServices;
    }

    @Bean
    public JwtAccessTokenConverter jwtAccessTokenConverter() { // <2>
        JwtAccessTokenConverter converter = new JwtAccessTokenConverter();
        converter.setSigningKey(serviceConfig.getJwtSigningKey());
        return converter;
    }

    @Bean
    public TokenEnhancer jwtTokenEnhancer() {
        return new JWTTokenEnhancer();
    }
}
----
<1> 서비스에 전달된 토큰에서 데이터를 읽는데 사용한다.
<2> JWT 와 OAuth2 서버 사이의 변환기로 동작한다. 토큰 서명에 사용하는 서명키를 설정한다. (중요)

OAuth2 서비스로 JWT토큰 생성, 해석기를 연결한다.
[source,java]
----
@Configuration
public class JWTOAuth2Config extends AuthorizationServerConfigurerAdapter {

    @Autowired
    private AuthenticationManager authenticationManager;

    @Autowired
    private UserDetailsService userDetailsService;

    @Autowired
    private TokenStore tokenStore;

    @Autowired
    private DefaultTokenServices tokenServices;

    @Autowired
    private JwtAccessTokenConverter jwtAccessTokenConverter;

    @Autowired
    private TokenEnhancer jwtTokenEnhancer;

    @Override
    public void configure(AuthorizationServerEndpointsConfigurer endpoints) throws Exception {
        TokenEnhancerChain tokenEnhancerChain = new TokenEnhancerChain();
        tokenEnhancerChain.setTokenEnhancers(Arrays.asList(jwtTokenEnhancer, jwtAccessTokenConverter));

        endpoints.tokenStore(tokenStore)                             //JWT <1>
                .accessTokenConverter(jwtAccessTokenConverter)       //JWT <2>
                .tokenEnhancer(tokenEnhancerChain)                   //JWT
                .authenticationManager(authenticationManager)
                .userDetailsService(userDetailsService);
    }

    @Override
    public void configure(ClientDetailsServiceConfigurer clients) throws Exception {

        clients.inMemory()
                .withClient("eagleeye")
                .secret(PasswordEncoderFactories.createDelegatingPasswordEncoder().encode("thisissecret"))
                .authorizedGrantTypes("refresh_token", "password", "client_credentials")
                .scopes("webclient", "mobileclient");
    }
}
----
<1> 토큰 저장소를 삽입한다.
<2> 스프링 시큐리티 Aouth2 코드가 JWT 를 사용하도록 연결한다.

=== 마이크로서비스에서 JWT 사용
마이크로서비스에서 JWT 토큰을 사용할 수 있도록 구현한다.

. 의존성 추가
[source,xml]
----
<dependency>
    <groupId>org.springframework.security</groupId>
    <artifactId>spring-security-jwt</artifactId>
    <version>1.0.9.RELEASE</version>
</dependency>
----

[start=2]
. JWTTokenStoreConfig 클래스를 설정한다.
인증 서비스의 JWTTokenStoreConfig 클래스와 거의 동일하다.

. JWT 토큰을 전파하도록 설정한다.
해당 서비스에서 다른 서비스를 호출할 경우, JWT 토큰을 전파해야한다.
보통 OAuth2RestTemplate 클래스로 수행되지만 OAuth2RestTemplate 클래스는 JWT 기반 토큰을 전파하지 않는다. 토큰 전파를 수행하기 위해 사용자 정의 RestTemplate 빈을 추가하여 토큰을 삽입한다.

[source,java]
----
@SpringBootApplication
@EnableEurekaClient
@EnableCircuitBreaker
@EnableResourceServer
public class Application {

    @Autowired
    private ServiceConfig serviceConfig;
    private static final Logger logger = LoggerFactory.getLogger(Application.class);

    @Primary
    @Bean
    public RestTemplate getCustomRestTemplate() {
        RestTemplate template = new RestTemplate();
        List interceptors = template.getInterceptors();
        if (interceptors == null) {
            template.setInterceptors(Collections.singletonList(new UserContextInterceptor()));
        } else {
            interceptors.add(new UserContextInterceptor());
            template.setInterceptors(interceptors);
        }

        return template;
    }


    public static void main(String[] args) {
        SpringApplication.run(Application.class, args);
    }
}
----

UserContextInterceptor 는 Authorization 헤더를 모든 REST 호출에 삽입하는 역할을 한다.

=== JWT 토큰 확장
JWT 토큰에 표준 필드 외에 다른 필드를 추가하고 싶다면 spring security Oauth2 의 TokenEnhancer 클래스를 확장하면 된다.

JWT 토큰에서 사용자가 정의한 필드를 파싱하려면 JWT 파서 라이브러리 중 하나를 사용하면 된다.

// == 마이크로서비스 구축 지침
// . 서비스 보호를 위해서 OAuth2 구현을 한다.
// . 모든 서비스에 HTTPS 을 사용한다.
// . 모든 마이크로서비스 호출은 API 게이트웨이를 통과하도록 만든다.
// . 공개 API 와 비공개 API 영역으로 서비스를 분리한다.
// ** 공개 영역에는 클라이언트로 소비되는 API 를 포함한다.
// ** 비공개 영역에는 핵심 애플리케이션 기능과 데이터를 보호하는 장벽 역할을 한다.
// . 불필요한 네트워크 포트를 차단해 마이크로서비스의 공격범위를 제한한다.


---
참고 링크

.OAuth
* https://tools.ietf.org/html/rfc6749
* https://d2.naver.com/helloworld/24942
* http://blog.weirdx.io/post/39955
* https://cheese10yun.github.io/oauth2/

.JWT
* https://medium.com/heumlabs/what-is-jwt-89889759ae37
