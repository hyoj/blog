{:title "자바 웹 개발 기본 다지기"
 :layout :post
 :tags  ["자바 기본기", "Technical Interview", "Java 기술 면접 예상 질문"]
}

:sectnums:

== 자바 프로그램의 실행과정을 설명해보세요.

=== 자바 코드를 자바 컴파일러로 바이트 코드로 컴파일합니다.
자바 바이트 코드란 JVM 이 이해할 수 있는 언어로 변환된 코드를 말하며, .class 확장자를 가집니다.

=== JVM 이 OS 로부터 프로그램이 필요한 메모리를 할당받아서 바이트 코드를 해석하고 실행합니다.
Class Loader 를 통해 실행에 필요한 모든 클래스 파일들을 JVM 에 로드합니다. 로드된 클래스 파일은 Runtime Data Areas (의 Method Area) 에 배치됩니다. JVM 은 Method Area 의 Byte Code 를 Execution Engine 에 제공합니다.

=== Execution Engine 은 Class 에 정의된 내용대로 해석하게 되는데, Java Interpreter 를 통해서 바이트 코드를 기계가 읽을 수 있는 형태로 해석됩니다. 이 과정에서 Byte code 가 Binary Code 로 변경됩니다.
. 바이트 코드가 기계어 코드로 변환되는 방식은 2가지가 있습니다.
.. interpreter
* 바이트 코드를 한 줄씩 해석하고 실행하는 방식입니다.
* JVM 초기에는 해당 방식으로만 해석했으나, 처리속도가 느린 단점이 있어 JIT 컴파일러가 도입되었습니다.
.. Just-In-Time Compiler (JIT)
* 바이트 코드를 매번 다시 컴파일 하지 않고, 유사한 바이트코드는 캐싱해둬서 컴파일에 필요한 총 시간을 단축합니다.
* 바이트 코드를 어셈블러 같은 네이티브 코드로 변경하여 수행합니다. 실행 속도는 빨라졌지만 네이티브 코드로 변경하는 비용이 발생합니다.

JVM 은 모든 코드를 JIT Compiler 방식으로 실행하지 않고, Interpreter 방식을 사용하다가 일정한 기준을 넘어가면 JIT Compiler 방식으로 실행합니다.

=== 해석된 프로그램은 Runtime Data Area 배치되어 수행이 이루어지며, 이 과정에서 필요에 따라 Garbage Collection 등의 작업을 수행합니다.
        
== JVM 이란? 그리고 JVM 구조에 대해서 설명해주세요.
프로그램을 실행하려면 운영체제가 관리하는 메모리를 제어할 수 있어야 하는데, JVM 이 OS 로 부터 메모리 사용 권한을 받아서 자바 프로그램을 호출하고 실행할 수 있도록 해줍니다.( OS 종속은 없어지면서 Write Once, Run Everywhere 가 가능해졌지만 JVM 은 플랫폼에 종속적입니다. )

=== JVM 이란 자바 가상 머신(Java Virtual Machine)의 약자로, 자바 바이트 코드를 (.class) 를 운영체제가 이해할 수 있게 변환하여 실행하는 역할을 합니다. 자바 런타임 전체를 담당합니다.

=== JVM 은 Class Loader, Execution Engine, Runtime Data Areas 로 구성되어 있습니다.

==== Class Loader
바이트코드를 읽고 메모리에 적재하는 역할을 합니다. 이 때 Runtime Data Areas 에 배치됩니다.
        
==== Execution Engine
Byte Code 를 실행 가능하게 해석하고 실행합니다. 이 과정에서 Byte Code 가 Binary Code 로 변경됩니다.
        
==== Runtime Data Areas
프로세스로서(프로그램을 수행하기 위해) JVM 이 프로그램을 수행하기 위해 OS 로 부터 할당 받는 메모리 공간입니다. Method, Heap, Stack, PC Register, Native Method Stack 로 나누어집니다.

.Method Area
* 모든 Thread 에 공유됩니다.
* Class Area == Method Area == Code Area == Static Area
* 클래스 정보, 변수 정보, Method 정보, Satic 변수 정보, 상수 정보 등이 저장되는 영역입니다.

.Heap Area
* 모든 Thread 에 공유됩니다.
* new 명령어로 생성된 인스턴스와 배열을 저장하는 공간입니다.
* Method Area 에 로드된 클래스만 생성 가능합니다.
* 공간이 부족해지면 Garbage Collection 이 실행 됩니다.

.Stack Area
* 각 Thread 별로 하나씩 생성됩니다.
* Method 안에서 사용되는 매개변수, 지역변수, 리턴값 등이 저장되는 영역입니다. 
* 메서드 호출이 있을 때마다 각각의 스택 프레임(그 메서드 만을 위한 공간) 이 생성됩니다. 스택 프레임은 LIFO(Last In First Out) 로 하나씩 생성되고, 메서드 실행이 완료되면 LIFO 로 프레임별로 하나씩 지워집니다.

.PC Register
* 각 Thread 별로 하나씩 생성됩니다.
* 각 Thread 마다 현재 실행할 스택 프레임을 가리키는 포인터를 저장하는 영역입니다.

.Native Method Stack
* 각 Thread 별로 하나씩 생성됩니다.
* 다른 언어  (C/C++ 등의) 메서드 호출을 위해 할당되는 영역입니다. 
    
== 리플렉션 이란 무엇인가요?
리플렉션(Reflection)은 Run Time 에 동적으로 특정 클래스의 정보를 구해오는 방법을 의미합니다. 자바 API 에서 제공하는 Reflection 을 통해 클래스, 인터페이스, 메서드 들을 찾을 수 있고, 객체 생성, 변수 변경, 메서드 호출을 할 수 있습니다.
    
.사용 예시
* IDE - IntelliJ, Eclipse 등의 IDE 가 자동완성으로 메서드 이름을 만들어 주는 것

* Tomcat 의 web.xml
web.xml 에 있는 클래스 이름을 가지고 웹의 요청을 처리할 서블릿을 실행하는 것

* 스프링 프레임워크
** 개발자가 등록한 Bean 을 런타임시에 스프링 애플리케이션에서 가져와서 사용할 수 있게 만들어 줌
        
.주의 사항
. 실행 시간에 동적으로 클래스의 정보를 분석하기 때문에 JVM 최적화를 수행할 수 없습니다.
. private 멤버도 접근과 조작이 가능합니다. (Field.setAccisible() true 지정시 가능)
        

== DTO 와 VO 차이는 무엇인가요?
. DTO 는 Data Transfer Object 로 View, Controller, Service layer 같은 계층간 에 데이터 전송을 위한 오브젝트입니다.
데이터 전송을 목적으로 하기 때문에, 로직 없이 필드와 각 필드에 대한 getter, setter 만 존재하는 객체입니다.
. VO 는 Value Object 로 값 그자체를 표현하는 오브젝트 입니다. 한 번 생성 한 후 절대로 바뀌지 않을 값을 표현합니다. 예를 들어 주소 값을 나타낼 때 사용합니다.
        
== 스프링 MVC 에서 HTTP 요청 처리의 흐름을 설명해보세요. (스프링 MVC 흐름)
. 클라이언트의 요청(HTTP 요청)이 DispatcherServlet 에 전달됩니다.
. DispatcherServlet 은 Spring 구성 파일에 추가된 HandlerMapping 을 이용하여 요청을 처리할 Controller 클래스를 찾습니다.
. DispatcherServlet 이 해당 Controller 의 적절한 메서드를 실행하고 처리 결과 정보를 담은 ModelAndView 객체를 DispatcherServlet 으로 리턴합니다.
. DispatcherServlet 은 이에 맞는 View 를 ViewResolver 에게 찾아달라고 요청합니다.
. DispatcherServlet 은 ViewResolver 로 부터 받은 View 를 클라이언트에 전송할 응답을 생성합니다. View 에서 모델 데이터를 이용해 결과를 렌더링한 후, 클라이언트에게 전달됩니다.

== 웹 애플리케이션을 만들기 위해 스프링 프레임워크을 사용하는 이유는 무엇이라고 생각하나요?
. 스프링 프레임워크는 모듈로 나뉘어져 있어서 사용할 모듈을 선택적으로 사용하기 좋습니다.
* Core - Dependency Injection, AOP 와 같은 핵심적인 기능
* Data Access - Java Transaction API, Java Persistence API, Java DataBase Connectivity 를 통한 데이터 액세스 지원
*. Web - Servlet API (Spring MVC), Spring WebFlux, Web Sockets 등을 지원

. 스프링 프레임워크는 생태계가 강력합니다. Spring Cloud, Spring Security, Spring Batch 등 같이 연계하여 사용할 수 있는 프로젝트들이 많이 있습니다.

. 테스트 코드를 작성하기가 좋습니다. Spring 을 이용하면 대부분 POJO 로 클래스를 작성하게 되고, 이로 인해 단위 테스트를 비교적 쉽게 수행할 수 있습니다.

. 대규모 엔터프라이즈 애플리케이션 개발에서 대부분 기본 솔루션으로 여겨질 만큼 성숙도가 높습니다. 또한 활발히 유지되고 개발되고 있습니다.

== Filter 와 Interceptor 의 차이는 무엇인가요?
(공통점) Servlet Filter 와 Spring HandlerInterceptor 둘 다 요청을 처리하기 전후로 데이터를 처리할 때 사용합니다.

* Filter 는 web.xml(Deployment Descriptor) 에 등록하고, Interceptor 는 Spring Context 에 등록 합니다.

* 실행되는 시점은 Filter 는 DispatcherServlet 앞단에서 동작하고, Interceptor 는 DispatcherServlet 이후에 동작하게 됩니다.

* 따라서 Filter 는 스프링의 Context 에 접근하기 어렵고, Interceptor 는 스프링에서 관리하는 bean 에 접근이 가능합니다. Interceptor 는 스프링 컨텍스트에 속하기 때문에, 등록된 핸들러 메서드(@Controller 의 메서드)의 메서드 시그니처 등의 정보를 알아낼 수 있습니다.

* DispatcherServlet 이후에는 View 가 모두 렌더링 완료된 상태이기 때문에, View 의 조작이 필요할 경우 Interceptor 에서 처리해야 합니다.

* HttpServletRequest 는 body (ServletInputStream 내용) 를 한 번만 읽을 수 있는데, 이를 바디를 로깅해야 한다거나 할 일이 있다면 HttpServletRequest 를 감싸서 여러 번 InputStream 을 열 수 있도록 커스터마이징된 ServletRequest 로 바디 내용을 여러 번 사용할 수 있습니다.
    
== 객체지향 디자인의 5원칙이란 무엇인가요?
객체 지향 디자인 5원칙은 SOLID 를 말하며, 유지보수하기 쉽고, 유연하고, 확장이 쉬운 소프트웨어를 만들 수 있게 해줍니다.

=== SRP (Single Responsibility Principle), 단일 책임의 원칙
* 모든 클래스는 단 하나의 책임을 가지는 것을 말합니다. 즉, 클래스를 수정할 이유가 오직 하나 뿐이어야 함을 의미합니다.
* 책임 영역이 확실해 지기 때문에, 하나의 변경사항이 다른 책임으로 변경으로 이어지는 연쇄작용에서 자유로울 수 있습니다.
* 캡슐화 (Encapsulation) 과 연관 있음
    
=== OCP (Open Closed Principle), 개방-폐쇄의 원칙
* 확장에는 개방되어 있지만, 수정에 대해서는 폐쇄되어야 함을 의미합니다.
* 요구사항의 변경이나 추가사항이 발생하더라도, 기존 구성요소는 수정이 일어나지 말아야 하며, 기존 구성요소를 쉽게 확장해서 재사용 할 수 있어야 합니다.
* 로버트 C. 마틴은 OCP 는 관리 가능하고 재사용 가능한 코드를 만드는 기반이며,  OCP를 가능케 하는 중요 매커니즘은 추상화와 다형성이라고 설명합니다.
    § 다형성(Polymolphism), 상속과 연관 있음
    
=== LSP (Liskov Substitusion Principle), 리스코프 치환 원칙
* 상위 클래스가 들어갈 자리에 하위 클래스를 넣어도 계획대로 잘 작동해야 합니다.
* 서브 타입은 기반 타입이 약속한 규약(public 인터페이스, 메서드가 던지는 예외 등)을 지켜야 합니다.
* 상속은 구현 상속 (Extends 관계) 이든, 인터페이스 상속 (Implements 관계) 이든 궁극적으로는 다형성을 통한 확장성을 목표로 합니다. LSP 도 상속처럼 서브 클래스가 확장에 대한 인터페이스를 준수해야 함을 의미합니다.
* 결국 이 구조는 다형성을 통한 확장의 원리인 OCP 를 제공하게 됩니다. 따라서 LSP 는 OCP를 구성하는 구조라고 볼 수 있습니다.
* LSP는 규약을 준수하는 상속구조를 제공하고, LSP 를 바탕으로 OCP는 확장하는 부분에 다형성을 제공해 변화에 열려있는 프로그램을 만들 수 있습니다.
    
=== ISP (Interface Segregation Principle), 인터페이스 분리 원칙
* 하나의 클래스는 자신이 사용하지 않는 인터페이스는 구현하지 말아야 한다는 원칙입니다.
* 하나의 일반적인 인터페이스 보다는, 여러 개의 구체적인 인터페이스가 낫습니다.
* SRP 는 클래스의 단일 책임을 강조, ISP 는 인터페이스의 단일 책임을 강조합니다.
    
=== DIP (Dependency Inversion Priniciple), 의존성 역전 원칙
* 자신이 의존하고 있는 다른 객체의 세부 구현을 몰라도 된다는 원칙입니다.
* 구체적인 클래스로 의존 관계를 맺지말고 추상화 된 인터페이스로 의존관계를 맺어 확장에 용이하게 합니다.
* 추상을 매개로 메시지를 주고 받음으로써 관계를 최대한 느슨하게 만듭니다.
    
== Error 와 Exception 의 차이는 무엇인가요?
* Error 는 시스템 레벨에서 비정상적인 상황이 생겼을 때 발생합니다. 매우 심각한 수준의 오류이지만, 시스템 레벨에서 발생하기 때문에 개발자가 이를 미리 예측하여 처리하도록 개발할 수 없습니다.
** StackOverFlowError, OutOfMemoryError 가 이에 해당합니다.

* Exception 은 개발자가 구현한 로직에서 발생합니다. 즉, 개발자가 예외가 발생할 상황을 미리 예측하여 처리할 수 있습니다.
** Exception 은 RuntimeException 과 CheckedException 으로 나눌 수 있습니다. RuntimeException 과 그 자식 클래스는 모두 Unchecked Exception 로 분류할 수 있습니다.

** Checked Exception 은 처리하지 않으면 컴파일이 되지 않습니다. +
ClassNotFoundException, CloneNotSupportException, NoSuchMethodException 등

** Unchecked Exception 은 컴파일 시에는 체크되지 않고, Runtime 에 발생하는 Exception 을 말합니다. 실행 과정 중 어떠한 특정 논리에 의해 발생합니다. +
NullPointerException, IndexOutOfBoundException 등 +
try-catch 블록을 통해 예외를 관리할 수 있습니다.

== RDB 와 NoSQL 을 어떨 때 써야하는지?
* RDB
** 데이터가 정해진 데이터 스키마를 따라 데이터베이스 테이블에 저장됩니다.
** 데이터는 관계를 통해서 연결된 여러개의 테이블에 분산됩니다.

* NoSQL
Not Only SQL 로 풀어 설명할 수 있는데, RDB 가 갖고 있는 특성 외에 다른 특성들을 부가적으로 지원한다는 것을 의미합니다.
** 기존의 관계형 데이터베이스와 다르게 고정된 스키마, Join, 트랜잭션의 개념이 존재하지 않습니다.
** 관계형 DB 보다 융통성있는 모델을 사용하고, 데이터 저장 및 검색에 특화된 매커니즘을 제공합니다. 단순 검색 및 추가 작업에 있어서 매우 최적화된 키 값 저장 기법 사용, 응답 속도, 처리 효율에 뛰어난 성능을 나타냅니다.
** NoSql의 종류
. Key-value Database
. Document Database
. BigTable Database
. Graph Database

데이터의 정합성이 중요할 경우 RDB를 사용하는 것이 좋습니다.

데이터 읽기를 자주 하지만 업데이트는 자주 하지 않는 경우, INSERT 집약적인 확장성 요청이 많은 경우 NoSQL 을 사용하는 것이 좋습니다.


'''


Compile Time::
자바 소스 파일을 Class 파일로 생성하는 과정

Run Time::
Compile Time 을 통해 생성한 Class 파일을 실행하는 과정

프레임워크를 사용해야 하는 이유::
. 보일러 플레이트 코드를 작성하기 보다는 핵심 비즈니스 로직 작성에 집중할 수 있게 해줍니다.
. 프레임워크는 지혜가 담겨있는 디자인 패턴을 기반으로 만들어졌습니다.
. 전체 어플리케이션을 만드는 비용을 줄일 수 있습니다.
. 어느정도 정해진 규칙대로 애플리케이션을 만들 수 있도록 해줍니다.

훅 메서드::
훅 메소드(슈퍼클래스에서 디폴트 기능을 정의해두거나 비워뒀다가 서브클래스에서 선택적으로 오버라이드할 수 있도록 만들어둔 메소드를 훅(hook) 메소드라고 합니다. 서브클래스에서는 추상 메소드를 구현하거나, 훅 메소드를 오버라이드하는 방법을 이용해 기능의 일부를 확장합니다.)
